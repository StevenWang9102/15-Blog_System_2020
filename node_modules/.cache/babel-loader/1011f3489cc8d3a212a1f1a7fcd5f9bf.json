{"ast":null,"code":"import { takeLatest, put, call } from 'redux-saga/effects';\nimport { INITIALDATA_LOADED } from './feedActions';\nimport axios from \"axios\";\nexport const feedSaga = function* () {\n  yield takeLatest(INITIALDATA_LOADED, loadInitialData); //为什么需要最新的？@@@@@@\n};\n\nconst loadInitialData = function* () {\n  // const [users, books] = yield call(fetchData);\n  const initData = yield call(fetchData);\n  console.log(initData[0].data['articles']);\n  yield put(usersAndBooksLoaded(users.data, books.data));\n};\n\nconst fetchData = () => {\n  return Promise.all([axios.get(\"https://conduit.productionready.io/api/articles?limit=10&offset=0\")]); // 要替换axios@@@@@@\n};","map":{"version":3,"sources":["/Users/Steven/Documents/GitHub/15-React_Blog_System/src/ReduxStore/FeedDetails/feedSagas.js"],"names":["takeLatest","put","call","INITIALDATA_LOADED","axios","feedSaga","loadInitialData","initData","fetchData","console","log","data","usersAndBooksLoaded","users","books","Promise","all","get"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,GAArB,EAA0BC,IAA1B,QAAsC,oBAAtC;AACA,SAASC,kBAAT,QAAmC,eAAnC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAO,MAAMC,QAAQ,GAAG,aAAa;AACjC,QAAML,UAAU,CAACG,kBAAD,EAAqBG,eAArB,CAAhB,CADiC,CAEjC;AACH,CAHM;;AAKP,MAAMA,eAAe,GAAG,aAAa;AACjC;AACA,QAAMC,QAAQ,GAAG,MAAML,IAAI,CAACM,SAAD,CAA3B;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYH,QAAQ,CAAC,CAAD,CAAR,CAAYI,IAAZ,CAAiB,UAAjB,CAAZ;AACA,QAAMV,GAAG,CAACW,mBAAmB,CAACC,KAAK,CAACF,IAAP,EAAaG,KAAK,CAACH,IAAnB,CAApB,CAAT;AACH,CALD;;AAOA,MAAMH,SAAS,GAAG,MAAM;AACpB,SAAOO,OAAO,CAACC,GAAR,CAAY,CAACZ,KAAK,CAACa,GAAN,CAAU,mEAAV,CAAD,CAAZ,CAAP,CADoB,CAEpB;AACH,CAHD","sourcesContent":["import { takeLatest, put, call } from 'redux-saga/effects';\nimport { INITIALDATA_LOADED } from './feedActions';\nimport axios from \"axios\";\n\nexport const feedSaga = function* () {\n    yield takeLatest(INITIALDATA_LOADED, loadInitialData); \n    //为什么需要最新的？@@@@@@\n};\n\nconst loadInitialData = function* () {\n    // const [users, books] = yield call(fetchData);\n    const initData = yield call(fetchData);\n    console.log(initData[0].data['articles']);\n    yield put(usersAndBooksLoaded(users.data, books.data));\n};\n\nconst fetchData = () => {\n    return Promise.all([axios.get(\"https://conduit.productionready.io/api/articles?limit=10&offset=0\")]); \n    // 要替换axios@@@@@@\n};\n\n"]},"metadata":{},"sourceType":"module"}